#!/usr/bin/env python3
import rclpy
from rclpy.node import Node
from sensor_msgs.msg import LaserScan, Range
import numpy as np
from rclpy.qos import QoSProfile, HistoryPolicy, ReliabilityPolicy


class LaserToSonarNode(Node):
    def __init__(self):
        super().__init__('laser_to_sonar_node')

        # --- Parameters (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô) ---
        # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® input_topic ‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ ROS2 remap ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏à‡∏≤‡∏Å launch file
        self.declare_parameter('output_topic', '/sonar_front')
        self.declare_parameter('field_of_view_deg', 30.0)

        output_topic = self.get_parameter('output_topic').get_parameter_value().string_value
        self.field_of_view_rad = np.deg2rad(
            self.get_parameter('field_of_view_deg').get_parameter_value().double_value
        )

        # QoS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
        sensor_qos_profile = QoSProfile(
            reliability=ReliabilityPolicy.BEST_EFFORT,
            history=HistoryPolicy.KEEP_LAST,
            depth=1
        )

        # ‚úÖ Subscribe ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á /scan (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ remap ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å launch)
        self.subscription = self.create_subscription(
            LaserScan,
            '/scan',  # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å remap ‡πÄ‡∏õ‡πá‡∏ô /scan_corrected ‡πÇ‡∏î‡∏¢ launch file
            self.scan_callback,
            qos_profile=sensor_qos_profile
        )

        # ‚úÖ Publisher ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• sonar
        self.publisher_ = self.create_publisher(Range, output_topic, 10)

        self.get_logger().info(
            f"‚úÖ Node started. Listening to '/scan' (remapped if specified), publishing to '{output_topic}'."
        )

    def scan_callback(self, msg: LaserScan):
        """‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LaserScan ‚Üí Range (‡∏à‡∏≥‡∏•‡∏≠‡∏á sonar ‡∏î‡πâ‡∏≤‡∏ô‡∏´‡∏ô‡πâ‡∏≤)"""
        num_scans = len(msg.ranges)
        if num_scans == 0:
            return

        # --- ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏°‡∏∏‡∏°‡∏°‡∏≠‡∏á (Field of View) ---
        center_index = num_scans // 2
        fov_half_angle_rad = self.field_of_view_rad / 2.0
        scans_per_radian = num_scans / (msg.angle_max - msg.angle_min)
        fov_scans = int(fov_half_angle_rad * scans_per_radian)
        start_index = max(0, center_index - fov_scans)
        end_index = min(num_scans - 1, center_index + fov_scans)

        # --- ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏°‡∏∏‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î ---
        ranges_in_fov = msg.ranges[start_index:end_index + 1]
        valid_ranges = [r for r in ranges_in_fov if np.isfinite(r) and r >= msg.range_min]

        # --- ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ---
        min_distance = msg.range_max
        if valid_ranges:
            min_distance = min(valid_ranges)

        # --- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó Range ---
        range_msg = Range()
        range_msg.header.stamp = self.get_clock().now().to_msg()

        # ‚úÖ ‡πÉ‡∏ä‡πâ frame_id ‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å LaserScan ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ TF ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö lidar_link
        range_msg.header.frame_id = msg.header.frame_id

        range_msg.radiation_type = Range.INFRARED
        range_msg.field_of_view = self.field_of_view_rad
        range_msg.min_range = msg.range_min
        range_msg.max_range = msg.range_max
        range_msg.range = float(min_distance)

        # --- ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å ---
        self.publisher_.publish(range_msg)


def main(args=None):
    rclpy.init(args=args)
    node = LaserToSonarNode()
    try:
        rclpy.spin(node)
    except KeyboardInterrupt:
        pass
    finally:
        node.destroy_node()
        # üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô shutdown ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô double shutdown
        if rclpy.ok():
            rclpy.shutdown()



if __name__ == '__main__':
    main()
